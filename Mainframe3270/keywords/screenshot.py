import os
import time

from robot.api import logger
from robot.api.deco import keyword

from Mainframe3270.librarycomponent import LibraryComponent


class ScreenshotKeywords(LibraryComponent):
    @keyword("Set Screenshot Folder")
    def set_screenshot_folder(self, path: str) -> None:
        r"""Set a folder to keep the html files generated by the `Take Screenshot` keyword.

        Note that the folder needs to exist before running your automation scripts. Else the images
        will be stored in the ``${OUTPUT DIR}`` set by robotframework.

        Example:
            | Set Screenshot Folder | C:\\Temp\\Images |
        """
        if os.path.exists(os.path.normpath(os.path.join(self.output_folder, path))):
            self.img_folder = path
        else:
            logger.error(f'Given screenshots path "{path}" does not exist')
            logger.warn(f'Screenshots will be saved in "{self.img_folder}"')

    @keyword("Take Screenshot")
    def take_screenshot(self, height: int = 410, width: int = 670, filename_prefix: str = "screenshot") -> str:
        """Generate a screenshot of the IBM 3270 Mainframe in a html format. The
        default folder is the log folder of RobotFramework, if you want change see the `Set Screenshot Folder`.

        The Screenshot is printed in an iframe log, with the values of height=410 and width=670, you
        can change these values by passing them to the keyword.

        The file name prefix can be set, the default is "screenshot".

        The full file path is returned.

        Example:
            | ${filepath} | Take Screenshot |
            | ${filepath} | Take Screenshot | height=500 | width=700 |
            | Take Screenshot | height=500 | width=700 |
            | Take Screenshot | filename_prefix=MyScreenshot |
        """
        extension = "html"
        filename_sufix = round(time.time() * 1000)
        filepath = os.path.join(self.img_folder, "%s_%s.%s" % (filename_prefix, filename_sufix, extension))
        self.mf.save_screen(os.path.join(self.output_folder, filepath))
        logger.write(
            '<iframe src="%s" height="%s" width="%s"></iframe>' % (filepath.replace("\\", "/"), height, width),
            level="INFO",
            html=True,
        )
        return filepath
